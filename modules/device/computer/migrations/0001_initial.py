# Generated by Django 3.2.4 on 2021-10-01 03:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('device', '0001_initial'),
        ('scheduler', '0002_initial'),
        ('checklist', '0002_initial'),
        ('user', '0002_auto_20210930_1115'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ComputerDevice',
            fields=[
                ('device_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='device.device')),
                ('equipment_type', models.CharField(choices=[('desktop', 'Desktop'), ('all-in-one', 'All-in-One'), ('laptop', 'Laptop'), ('others', 'Others')], max_length=30)),
                ('equipment_type_other', models.CharField(blank=True, max_length=80)),
                ('serial', models.CharField(max_length=150)),
                ('mac_address', models.CharField(max_length=32, unique=True)),
            ],
            options={
                'verbose_name': 'Device',
            },
            bases=('device.device',),
        ),
        migrations.CreateModel(
            name='ComputerRemark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('history_instance', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('enable', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Remark',
            },
        ),
        migrations.CreateModel(
            name='HistoricalComputerRemark',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('enable', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Remark',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalComputerDevice',
            fields=[
                ('device_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='device.device')),
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('device_id', models.CharField(blank=True, max_length=8)),
                ('model', models.CharField(max_length=200)),
                ('date_acquired', models.DateField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('unit_cost', models.CharField(max_length=20)),
                ('equipment_type', models.CharField(choices=[('desktop', 'Desktop'), ('all-in-one', 'All-in-One'), ('laptop', 'Laptop'), ('others', 'Others')], max_length=30)),
                ('equipment_type_other', models.CharField(blank=True, max_length=80)),
                ('serial', models.CharField(max_length=150)),
                ('mac_address', models.CharField(db_index=True, max_length=32)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('brand', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='device.brand')),
                ('clientele', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='user.clientele')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('office', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='user.office')),
            ],
            options={
                'verbose_name': 'historical Device',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalComputerCheckList',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('schedule', models.DateTimeField(default=django.utils.timezone.now)),
                ('data', models.JSONField()),
                ('conforme', models.CharField(blank=True, max_length=80)),
                ('evaluator', models.CharField(blank=True, max_length=80)),
                ('attested', models.CharField(blank=True, max_length=80)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('checklist', models.ForeignKey(blank=True, db_constraint=False, default=1, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='checklist.checklist')),
                ('device', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='computer.computerdevice')),
                ('event', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='scheduler.event')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('scheduler', models.ForeignKey(blank=True, db_constraint=False, default=1, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='scheduler.scheduler')),
                ('technician', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Checklist',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='ComputerSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='checklist.checklist')),
                ('scheduler', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scheduler.scheduler')),
            ],
            options={
                'verbose_name': 'Settings',
            },
        ),
        migrations.CreateModel(
            name='ComputerServiceOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issued_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user.clientele')),
            ],
        ),
        migrations.CreateModel(
            name='ComputerCheckList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('history_instance', models.IntegerField(blank=True, editable=False, null=True)),
                ('schedule', models.DateTimeField(default=django.utils.timezone.now)),
                ('data', models.JSONField()),
                ('conforme', models.CharField(blank=True, max_length=80)),
                ('evaluator', models.CharField(blank=True, max_length=80)),
                ('attested', models.CharField(blank=True, max_length=80)),
                ('checklist', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='checklist.checklist')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='computer.computerdevice')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scheduler.event')),
                ('scheduler', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='scheduler.scheduler')),
                ('technician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Checklist',
            },
        ),
    ]
